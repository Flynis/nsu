import rational_number;
import expression;
import expression_set;
import rule;

export {
    simplify(e: Expr, rules: Set<MapRule>) -> Expr;
}

calcConst(e: Expr) -> Expr {
    switch(e) {
        Neg(expr): {
            v = calculateNoVars(expr);
            if (!isNan(v)) {
                Const(negRNumber(v));
            } else {
                Neg(calcConst(expr));
            }
        }
        Binary(l, r, op):  {
            lv = calculateNoVars(l);
            rv = calculateNoVars(r);
            if (!isNan(lv) && !isNan(rv)) {
                result = switch(op) {
                    AddOp() : addRNumbers(lv, rv);
                    SubOp() : subRNumbers(lv, rv); 
                    MulOp() : mulRNumbers(lv, rv);
                    DivOp() : divRNumbers(lv, rv);
                }
                Const(result);
            } else {
                Binary(calcConst(l), calcConst(r), op);
            }
        }
        default: e;
    }
}

applyBinaryOp(a: [Expr], b: [Expr], op: BinaryOp) -> [Expr] {
    fold(a, [], \acc, exprA -> {
        applied = fold(b, [], \arr, exprB -> {
            arrayPush(arr, Binary(exprA, exprB, op));
        });
        concat(acc, applied);
    });
}

makeNegative(es: [Expr]) -> [Expr] {
    map(es, \e -> Neg(e));
}

searchAndSimplify(e: Expr, r: Set<MapRule>) -> [Expr] {
    //println("searchsimplify " + expr2s(e));
    switch(e) {
        Neg(operand): {
            form = searchMinFormsByRules(operand, r);
            //println("searchsimplify neg " + i2s(length(form)));
            makeNegative(form);
        }
        Binary(le, re, op): {
            lform = searchMinFormsByRules(le, r);
            rform = searchMinFormsByRules(re, r);
            //println("searchsimplify binary " + i2s(length(lform)) + " " + i2s(length(rform)));
            applyBinaryOp(lform, rform, op);
        }
        default: [e];
    }
}

applyRulesToSet(es: ExpressionsSet, r: Set<MapRule>) -> [Expr] {      
    if (hasNextElement(es)) {
        curExpr = getCurrentElement(es);
        //println(expr2s(curExpr));

        tmp1 = searchAndSimplify(curExpr, r);
        //println("tmp1 " + i2s(length(tmp1)));

        tmp2 = fold(tmp1, es, \s, e -> tryToAppendElement(s, e));

        newFoundForms = foldSet(r, tmp2, \acc, rule -> {
            newForm = applyRule(curExpr, rule);
            eitherMap(newForm, \f -> tryToAppendElement(acc, calcConst(f)), acc);
        });

        applyRulesToSet(newFoundForms, r);
    } else {
        es.elements;
    }
}

applyRules(es: [Expr], r: Set<MapRule>) -> [Expr] {
    //println("applyrules " + i2s(length(es)));
    applyRulesToSet(makeExpressionsSet(es), r);
}

searchMinFormsByRules(e: Expr, r: Set<MapRule>) -> [Expr] {
    //("searchbyrules " + expr2s(e));
    applyRules(searchAndSimplify(e, r), r);
}

simplify(e: Expr, r: Set<MapRule>) -> Expr {    
    //println("simplify " + expr2s(e));
    e1 = calcConst(e);
    minimalForms = searchMinFormsByRules(e1, r);
    e2 = minimalForms[length(minimalForms) - 1];
    calcConst(e2);
}
