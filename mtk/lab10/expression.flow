import string;
import rational_number;
import lingo/pegcode/driver;

export {
    BinaryOp ::= AddOp, SubOp, MulOp, DivOp;
    AddOp : ();
    SubOp : ();
    MulOp : ();
    DivOp : ();

    Expr ::= Int, Var, Neg, Binary, Const;
    Const : (r : RNumber);
    Int : (i : int);
    Var : (name: string);
    Neg : (e: Expr);
    Binary : (l : Expr, r : Expr, op : BinaryOp);

    expr2s(e: Expr) -> string;
    calculate(e: Expr, variables: Tree<string, RNumber>) -> RNumber;
    calculateNoVars(e: Expr) -> RNumber;
    parse(str: string) -> Expr;
    getSize(e: Expr) -> int;
}

expr2s(e: Expr) -> string {
    switch(e) {
        Const(r): r2s(r);
        Int(i): i2s(i);
        Var(name): name;
        Neg(expr): "-" + expr2s(expr);
        Binary(l, r, op): {
            lstr: string = expr2s(l);
            rstr: string = expr2s(r);
            "(" + switch(op) {
                AddOp(): lstr + " + " + rstr;
                SubOp(): lstr + " - " + rstr;
                MulOp(): lstr + " * " + rstr;
                DivOp(): lstr + " / " + rstr;
            } + ")";
        }
    }
}

getVarValue(name: string, variables: Tree<string, RNumber>) -> RNumber {
    switch(lookupTree(variables, name)) {
        None(): nan();        
        Some(value): value;
    }
}

calculate(e: Expr, variables: Tree<string, RNumber>) -> RNumber {
    switch(e) {
        Const(r): r;
        Int(i): i2r(i);
        Var(name): getVarValue(name, variables);
        Neg(expr): negRNumber(calculate(expr, variables));
        Binary(l, r, op): {
            lValue: RNumber = calculate(l, variables);
            rValue: RNumber = calculate(r, variables);
            switch(op) {
                AddOp(): addRNumbers(lValue, rValue);
                SubOp(): subRNumbers(lValue, rValue);
                MulOp(): mulRNumbers(lValue, rValue);
                DivOp(): divRNumbers(lValue, rValue);
            };
        }
    }
}

calculateNoVars(e: Expr) -> RNumber {
    calculate(e, makeTree());
}

buildSub(xs : [flow]) {
    fold(xs[1], xs[0], \acc, x -> Binary(acc, x, SubOp()))
}

buildDiv(xs : [flow]) {
    fold(xs[1], xs[0], \acc, x -> Binary(acc, x, DivOp()))
}

specialPegActions = {
    t1 = setTree(defaultPegActions.t, "buildSub", buildSub);
    t2 = setTree(t1, "buildDiv", buildDiv);
    SemanticActions(t2);
}

grammar = compilePegGrammar("#include rational_arith.lingo");

parse(str: string) -> Expr {
    parsic(grammar, str, specialPegActions);
}

getSize(e: Expr) -> int {
    switch(e) {
        Neg(expr): getSize(expr) + 1;
        Binary(l, r, op): getSize(l) + getSize(r) + 1;
        default: 1;
    }
}
