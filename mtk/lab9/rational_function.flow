import expression;
import polynom;

export {
    RationalFunc : (p: Polynom, q: Polynom);

    expr2rfunc(e: Expr) -> RationalFunc;

    rfunc2s(f: RationalFunc) -> string;
}

r2rfunc(r: RationalNum) -> RationalFunc {
    RationalFunc(r2polynom(r), r2polynom(i2r(1)));
}

v2rfunc(v: string) -> RationalFunc {
    RationalFunc(v2polynom(v), r2polynom(i2r(1)));
}

expr2rfunc(e: Expr) -> RationalFunc {
    switch(e) {
        Rational(r): r2rfunc(r);
        Int(i): r2rfunc(i2r(i));
        Var(name): v2rfunc(name);
        Neg(expr): {
            f: RationalFunc = expr2rfunc(expr);
            RationalFunc(negPolynom(f.p), f.q);
        }
        Binary(l, r, op): {
            lf: RationalFunc = expr2rfunc(l);
            rf: RationalFunc = expr2rfunc(r);
            switch(op) {
                AddOp(): RationalFunc(
                    addPolynoms(mulPolynoms(lf.p, rf.q), mulPolynoms(rf.p, lf.q)), 
                    mulPolynoms(lf.q, rf.q)
                );
                SubOp(): RationalFunc(
                    addPolynoms(mulPolynoms(lf.p, rf.q), negPolynom(mulPolynoms(rf.p, lf.q))), 
                    mulPolynoms(lf.q, rf.q)
                );
                MulOp(): RationalFunc(
                    mulPolynoms(lf.p, rf.p), mulPolynoms(lf.q, rf.q)
                );
                DivOp(): RationalFunc(
                    mulPolynoms(lf.p, rf.q), mulPolynoms(lf.q, rf.p)
                );
            };
        }
    }
}

rfunc2s(f: RationalFunc) -> string {
    polynom2s(f.p) + " / " + polynom2s(f.q);
}
