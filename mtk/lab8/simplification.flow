import expression;
import rational;

export {
    simplifyAdd(l: Expr, r: Expr) -> Expr;
    
    simplifySub(l: Expr, r: Expr) -> Expr;
    
    simplifyMul(l: Expr, r: Expr) -> Expr;
    
    simplifyDiv(l: Expr, r: Expr) -> Expr;
    
    simplifyBinary(l: Expr, r: Expr, op: BinaryOp) -> Expr;
    
    simplifyNeg(e: Expr) -> Expr;
    
    simplify(e: Expr) -> Expr;
}

simplifyAdd(l: Expr, r: Expr) -> Expr {
    lValue: RationalNum = calculateNoVars(l);
    rValue: RationalNum = calculateNoVars(r);
    if (!isNan(lValue) && !isNan(rValue)) {
        Rational(rationalAdd(lValue, rValue));
    } else if (isZero(lValue)) {
        r;
    } else if (isZero(rValue)) {
        l;
    } else if (l == Neg(r) || r == Neg(l)) {
        Int(0);
    } else {
        addExpressions(l, r);
    }
}

simplifySub(l: Expr, r: Expr) -> Expr {
    lValue: RationalNum = calculateNoVars(l);
    rValue: RationalNum = calculateNoVars(r);
    if (!isNan(lValue) && !isNan(rValue)) {
        Rational(rationalSub(lValue, rValue));
    } else if (isZero(lValue)) {
        Neg(r);
    } else if (isZero(rValue)) {
        l;
    } else if (l == r) {
        Int(0);
    } else {
        subExpressions(l, r);
    }
}

simplifyMul(l: Expr, r: Expr) -> Expr {
    lValue: RationalNum = calculateNoVars(l);
    rValue: RationalNum = calculateNoVars(r);
    if (!isNan(lValue) && !isNan(rValue)) {
        Rational(rationalMul(lValue, rValue));
    } else if (isZero(lValue) || isZero(rValue)) {
        Int(0);
    } else if (isOne(rValue)) {
        l;
    } else if (isOne(lValue)) {
        r;
    } else {
        mulExpressions(l, r);
    }
}

simplifyDiv(l: Expr, r: Expr) -> Expr {
    lValue: RationalNum = calculateNoVars(l);
    rValue: RationalNum = calculateNoVars(r);
    if (!isNan(lValue) && !isNan(rValue)) {
        Rational(rationalDiv(lValue, rValue));
    } else if (isOne(rValue)) {
        l;
    } else if (isZero(lValue)) {
        Int(0);
    } else {
        divExpressions(l, r);
    }
}

simplifyBinary(l: Expr, r: Expr, op: BinaryOp) -> Expr {
    switch(op) {
        AddOp(): simplifyAdd(l, r);
        SubOp(): simplifySub(l, r);
        MulOp(): simplifyMul(l, r);
        DivOp(): simplifyDiv(l, r);
    };
}

simplifyNeg(e: Expr) -> Expr {
    value: RationalNum = calculateNoVars(e);
    if (value != nan()) {
        Rational(rationalMul(i2r(-1), value));
    } else {
        Neg(e);
    }
}

simplify(e: Expr) -> Expr {
    switch(e) {
        Neg(expr): simplifyNeg(expr);
        Binary(l, r, op): {
            ls: Expr = simplify(l);
            rs: Expr = simplify(r);
            simplifyBinary(ls, rs, op);
        }
        default: e;
    }
}

