import expression;
import simplification;

export {
    differentiate(e: Expr, variable: string) -> Expr;
}

differentiate(e: Expr, variable: string) -> Expr {
    switch(e) {
        Var(name): if(name == variable) Int(1) else Int(0);
        Neg(expr): simplifyNeg(differentiate(expr, variable));
        Binary(l, r, op): {
            ld: Expr = differentiate(l, variable);
            rd: Expr = differentiate(r, variable);
            switch(op) {
                AddOp(): simplifyAdd(ld, rd);
                SubOp(): simplifySub(ld, rd);
                MulOp(): simplifyAdd(simplifyMul(l, rd), simplifyMul(ld, r));
                DivOp(): simplifyDiv(simplifySub(simplifyMul(ld, r), simplifyMul(l, rd)), simplifyMul(r, r));
            };
        }
        default: Int(0);
    }
}

