import string;
import operand;

export {
    BinaryOp ::= AddOp, SubOp, MulOp, DivOp;
    AddOp : ();
    SubOp : ();
    MulOp : ();
    DivOp : ();

    ArithExpr ::= Operand, Neg, Binary;
    Neg : (e: ArithExpr);
    Binary : (l: ArithExpr, r: ArithExpr, op: BinaryOp);

    arithexpr2s(e: ArithExpr) -> string;
}

arithexpr2s(e: ArithExpr) -> string {
    switch(e) {
        ConstInt(i): i2s(i);
        Var(name): name;
        Neg(expr): "-" + arithexpr2s(expr);
        Binary(l, r, op): {
            lstr: string = arithexpr2s(l);
            rstr: string = arithexpr2s(r);
            "(" + switch(op) {
                AddOp(): lstr + " + " + rstr;
                SubOp(): lstr + " - " + rstr;
                MulOp(): lstr + " * " + rstr;
                DivOp(): lstr + " / " + rstr;
            } + ")";
        }
    }
}
